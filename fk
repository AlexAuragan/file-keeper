#!/bin/bash

DB="$HOME/.file_keeper"
REPO_URL="https://github.com/AlexAuragan/file-keeper.git"

install_fk() {
  local target="/usr/local/bin/fk"
  local script_path="$(realpath "$0")"
  local repo_root

  repo_root="$(dirname "$script_path")"

  if [ ! -w "$(dirname "$target")" ]; then
    echo "Root permissions required to install to $target"
    sudo cp "$script_path" "$target" && sudo chmod +x "$target" &&
      echo "Installed fk to $target"
  else
    cp "$script_path" "$target" && chmod +x "$target" &&
      echo "Installed fk to $target"
  fi

  if [ -d "$repo_root/.git" ]; then
    echo "Removing Git folder from $repo_root..."
    rm -rf "$repo_root/.git"
  fi
}

update_fk() {
  local tmp_dir
  tmp_dir=$(mktemp -d)

  echo "Cloning File Keeper repository..."
  git clone --depth 1 "$REPO_URL" "$tmp_dir" || {
    echo "Failed to clone repository."
    return 1
  }

  if [ -f "$tmp_dir/fk" ]; then
    echo "Installing new version..."
    (cd "$tmp_dir" && ./fk --init)
  elif [ -f "$tmp_dir/fk.sh" ]; then
    echo "Installing new version..."
    (cd "$tmp_dir" && ./fk.sh --init)
  else
    echo "Could not find fk script in repository."
    rm -rf "$tmp_dir"
    return 1
  fi

  rm -rf "$tmp_dir"
  echo "Update completed!"
}

add_file() {
  local file="$1"
  shift
  local description="$*"

  if [ -z "$file" ] || [ -z "$description" ]; then
    echo "Usage: fk --add <path> <description>"
    return
  fi

  grep -q "^$file|" "$DB" 2>/dev/null && {
    echo "File already tracked: $file"
    return
  }

  echo "$file|$description" >>"$DB"
  echo "Added: $file [$description]"
}

list_files() {
  if [ ! -s "$DB" ]; then
    echo "No files tracked yet."
    exit 0
  fi

  local config_files=()
  local service_files=()
  while IFS= read -r line; do
    local file="${line%%|*}"
    local desc="${line#*|}"
    [ "$file" = "$desc" ] && desc=""
    if [[ "$file" == *"/systemd/"* ]]; then
      service_files+=("$file|$desc")
    else
      config_files+=("$file|$desc")
    fi
  done <"$DB"

  echo "Config files:"
  local i=1
  for entry in "${config_files[@]}"; do
    local path="${entry%%|*}"
    local desc="${entry#*|}"
    [ -n "$desc" ] && echo "  $i) $path [$desc]" || echo "  $i) $path"
    ((i++))
  done

  echo "Service files:"
  local letter="a"
  for entry in "${service_files[@]}"; do
    local path="${entry%%|*}"
    local desc="${entry#*|}"
    [ -n "$desc" ] && echo "  $letter) $path [$desc]" || echo "  $letter) $path"
    letter=$(echo "$letter" | tr "0-9a-z" "1-9a-z_")
    letter=$(echo "$letter" | tr "_z" "aa")
  done

  echo -n "Select (e.g., 1, ar, ai, aj): "
  read -r choice
  SELECTED_PATH=$(get_path_from_choice "$choice" config_files[@] service_files[@])
}

get_path_from_choice() {
  local choice="$1"
  shift
  local configs=("${!1}")
  shift
  local services=("${!1}")

  if [[ "$choice" =~ ^[0-9]+ ]]; then
    local idx=$((choice - 1))
    [[ $idx -ge 0 && $idx -lt ${#configs[@]} ]] || {
      echo "Invalid number"
      return
    }
    echo "${configs[$idx]%%|*}"
  elif [[ "$choice" =~ ^[a-z] ]]; then
    local letter="${choice:0:1}"
    local idx=$(($(printf '%d' "'$letter") - 97))
    [[ $idx -ge 0 && $idx -lt ${#services[@]} ]] || {
      echo "Invalid letter"
      return
    }
    echo "${services[$idx]%%|*}"
  fi
}

edit_file() {
  list_files
  [ -z "$SELECTED_PATH" ] && return
  echo -n "Enter new description for '$SELECTED_PATH': "
  read -r new_desc

  sed -i "s|^$SELECTED_PATH|.*|$SELECTED_PATH|$new_desc|" "$DB"
  echo "Updated description for $SELECTED_PATH"
}

delete_file() {
  list_files
  [ -z "$SELECTED_PATH" ] && return
  grep -v "^$SELECTED_PATH|" "$DB" >"$DB.tmp" && mv "$DB.tmp" "$DB"
  echo "Deleted $SELECTED_PATH from tracking"
}

handle_choice() {
  local choice="$1"
  shift
  local configs=("${!1}")
  shift
  local services=("${!1}")

  if [[ "$choice" =~ ^[0-9]+ ]]; then
    local idx=$((choice - 1))
    [[ $idx -ge 0 && $idx -lt ${#configs[@]} ]] || {
      echo "Invalid number"
      return
    }
    local path="${configs[$idx]%%|*}"
    nano "$path"

  elif [[ "$choice" =~ ^[a-z] ]]; then
    local letter="${choice:0:1}"
    local action="${choice:1}"
    local idx=$(($(printf '%d' "'$letter") - 97))
    [[ $idx -ge 0 && $idx -lt ${#services[@]} ]] || {
      echo "Invalid letter"
      return
    }

    local svc_file="${services[$idx]%%|*}"
    local svc_name=$(basename "$svc_file" .service)

    case "$action" in
    "") nano "$svc_file" ;;
    "r") systemctl restart "$svc_name" ;;
    "s") systemctl start "$svc_name" ;;
    "i") systemctl status "$svc_name" ;;
    "j") journalctl -u "$svc_name" ;;
    "jf") journalctl -u "$svc_name" -f ;;
    *) echo "Unknown action: $action" ;;
    esac
  else
    echo "Invalid input"
  fi
}

case "$1" in
--add)
  shift
  add_file "$@"
  ;;
--init) install_fk ;;
--update) update_fk ;;
--edit) edit_file ;;
--delete) delete_file ;;
"") list_files ;;
*) echo "Usage: fk [--add <path> <description>] [--init] [--update] [--edit] [--delete]" ;;
esac
